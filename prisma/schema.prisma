// IsDeleted models: User, Contest, Submission, Problem, Judge

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Client
model User {
  id String @id @default(uuid())

  email    String  @unique
  username String  @unique
  password String
  fullname String?
  // DOB      DateTime
  perms    BigInt  @default(0)

  isDeleted Boolean    @default(false)
  status    UserStatus @default(CONF_AWAITING)

  roles         UserOnRole[]
  sessions      Session[]
  rating        Rating?
  submissions   Submission[]
  participation Contestant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id String @id @default(uuid())

  name  String @unique
  color String
  perms BigInt @default(0)

  users UserOnRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// explicit m-n relation to store metadata
model UserOnRole {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, roleId])
}

model Session {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String
  ip     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  userAgent String?
}

model Rating {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  countContests      Int    @default(0)
  totalContestPoints BigInt @default(0)

  points      Int   @default(0)
  mean        Float @default(0)
  performance Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contestant {
  contest   Contest @relation(fields: [contestId], references: [id])
  contestId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  @@id([contestId, userId])
}

model Contest {
  id   Int    @id @default(autoincrement())
  name String
  slug String

  minRating Int @default(0)
  maxRating Int @default(0)

  isDeleted Boolean @default(false)
  authorId  String

  participants Contestant[]
  problems     Problem[]
}

model Submission {
  id Int @id @default(autoincrement())

  author      User    @relation(fields: [authorId], references: [id])
  authorId    String
  problem     Problem @relation(fields: [problemSlug], references: [slug])
  problemSlug String

  code     String
  language String

  isDeleted Boolean @default(false)
  isLocked  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// explicit m-n relation
// model ProblemOnContest {
//   contest     Contest @relation(fields: [contestId], references: [id])
//   contestId   Int
//   problem     Problem @relation(fields: [problemSlug], references: [slug])
//   problemSlug String

//   @@id([contestId, problemSlug])
// }

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  problems Problem[]
}

model Type {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  problems Problem[]
}

// explicit m-n relation: CategoryOnProblem

model Problem {
  slug String @id

  name        String
  description String?
  categories  Category[]
  types       Type[]
  points      Int

  input  String @default("stdin")
  output String @default("stdout")

  curators String[]
  authors  String[]

  pdfUuid String? @unique

  contests         Contest[]
  submissions      Submission[]
  subStats         ProblemSubmissionsStats?
  testEnvironments ProblemTestEnvironment?
  solution         String?

  total_subs Int @default(0)
  AC_subs    Int @default(0)

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProblemTestEnvironment {
  problemSlug String  @id
  problem     Problem @relation(fields: [problemSlug], references: [slug])

  allowedLangs String[] @default([])
  timeLimit    Int      @default(1) // seconds
  memoryLimit  Int      @default(256) // in MB

  PTEs ProblemLanguageTestEnvironment[]
}

// Specific configuration for a coding language
model ProblemLanguageTestEnvironment {
  problemSlug String                 @unique
  PTE         ProblemTestEnvironment @relation(fields: [problemSlug], references: [problemSlug])
  lang        String                 @unique

  timeLimit   Int @default(1) // seconds
  memoryLimit Int @default(256) // in MB

  @@id([problemSlug, lang])
}

model ProblemSubmissionsStats {
  problemSlug String  @id
  problem     Problem @relation(fields: [problemSlug], references: [slug])

  WA  Int @default(0)
  RTE Int @default(0)
  OLE Int @default(0)
  IR  Int @default(0)
  TLE Int @default(0)
  MLE Int @default(0)
  RE  Int @default(0)
}

enum Gender {
  MALE
  FEMALE
  RATHER_NOT_SAY
}

enum UserStatus {
  ACTIVE
  DISABLED
  BANNED
  CONF_AWAITING
}

enum JudgeStatus {
  ACTIVE
  DISABLED
}

// Judge
model Judge {
  id   String  @id @default(uuid())
  name String  @unique
  host String  @unique
  ip   String?

  status JudgeStatus @default(ACTIVE)
  token  JudgeToken?

  isDeleted Boolean @default(false)

  lastActive DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// generate jwt with payload: { id: JudgeToken.createdAt + JudgeToken.id }
model JudgeToken {
  id      String @id @default(cuid()) // ensure that when judge tokens are (re)generated, they are jwt-ed from different ids
  judge   Judge  @relation(fields: [judgeId], references: [id])
  judgeId String @unique

  createdAt DateTime @default(now())
}
