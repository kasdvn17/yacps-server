// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Client
model User {
  id String @id @default(uuid())

  email    String @unique
  username String @unique
  password String
  fullname String
  // DOB      DateTime
  perms    BigInt @default(0)

  isDeleted Boolean    @default(false)
  status    UserStatus @default(ACTIVE) //@default(CONF_AWAITING)

  roles         UserOnRole[]
  sessions      Session[]
  rating        Rating?
  submissions   Submission[]
  participation Contestant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id    String @id @default(uuid())
  name  String
  color String
  perms BigInt @default(0)

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  users     UserOnRole[]
}

// mysql doesn't support sth simpler:(
model UserOnRole {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, roleId])
}

model Session {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  ip     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model Rating {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  points Int @default(0)

  contests_cnt Int    @default(0)
  contests_sum BigInt @default(0)
  mean         Float  @default(0)
  performance  Float  @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contestant {
  contest   Contest @relation(fields: [contestId], references: [id])
  contestId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  @@id([contestId, userId])
}

model Contest {
  id       Int                @id @default(autoincrement())
  contest  Contestant[]
  problems ProblemOnContest[]
  authorId String
}

model Submission {
  id Int @id @default(autoincrement())

  author      User    @relation(fields: [authorId], references: [id])
  authorId    String
  problem     Problem @relation(fields: [problemSlug], references: [slug])
  problemSlug String

  code     String
  language String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProblemOnContest {
  contest     Contest @relation(fields: [contestId], references: [id])
  contestId   Int
  problem     Problem @relation(fields: [problemSlug], references: [slug])
  problemSlug String

  @@id([contestId, problemSlug])
}

model Problem {
  slug        String             @id
  name        String
  description String?
  statement   String
  contests    ProblemOnContest[]
  authorId    String

  Submission Submission[]
}

enum Gender {
  MALE
  FEMALE
  RATHER_NOT_SAY
}

enum UserStatus {
  ACTIVE
  DISABLED
  BANNED
  CONF_AWAITING
}

// Judge
model Judge {
  id    String      @id
  name  String      @unique
  host  String      @unique
  ip    String?
  token JudgeToken?

  lastActive DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model JudgeToken {
  id      String @id // ensure that when judge tokens are (re)generated, they are jwt-ed from different ids
  judge   Judge  @relation(fields: [judgeId], references: [id])
  judgeId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
