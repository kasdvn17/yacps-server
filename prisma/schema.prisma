// IsDeleted models: User, Contest, Submission, Problem, Judge

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Client
model User {
  id String @id @default(uuid())

  email    String  @unique
  username String  @unique
  password String
  fullname String?
  // DOB      DateTime
  perms    BigInt  @default(0)

  rating Int?

  isDeleted Boolean    @default(false)
  status    UserStatus @default(CONF_AWAITING)

  roles         Role[]
  sessions      Session[]
  submissions   Submission[]
  participation Contestant[]

  contAuthors  Contest[] @relation("AuthorToContest")
  contCurators Contest[] @relation("CuratorToContest")
  contTesters  Contest[] @relation("TesterToContest")

  probAuthors  Problem[] @relation("AuthorToProblem")
  probCurators Problem[] @relation("CuratorToProblem")
  probTesters  Problem[] @relation("TesterToProblem")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id Int @id @default(autoincrement())

  name  String @unique
  color String
  perms BigInt @default(0)

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// explicit m-n relation to store metadata
// model UserOnRole {
//   user   User   @relation(fields: [userId], references: [id])
//   userId String
//   role   Role   @relation(fields: [roleId], references: [id])
//   roleId Int

//   @@id([userId, roleId])
// }

model Session {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  ip        String?
  userAgent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model Contestant {
  id Int @id @default(autoincrement())

  contest   Contest @relation(fields: [contestId], references: [id])
  contestId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  rank  Int // 1-indexed ranking
  score Float? @default(0) // Optional, for IOI scoring

  oldRating    Int
  newRating    Int
  ratingChange Int

  isVirtual Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]

  @@index([userId])
  @@index([contestId])
  @@index([userId, contestId])
}

model Contest {
  id   Int    @id @default(autoincrement())
  slug String @unique

  name    String
  isRated Boolean      @default(true)
  style   ContestStyle

  isDeleted Boolean @default(false)

  authors  User[] @relation("AuthorToContest")
  curators User[] @relation("CuratorToContest")
  testers  User[] @relation("TesterToContest")

  participants Contestant[]
  problems     Problem[]
}

enum ContestStyle {
  IOI
  ICPC
  TopCoder
  Heuristic
}

model Submission {
  id Int @id @default(autoincrement())

  author       User        @relation(fields: [authorId], references: [id])
  authorId     String
  problem      Problem     @relation(fields: [problemId], references: [id])
  problemId    Int
  contestant   Contestant? @relation(fields: [contestantId], references: [id])
  contestantId Int?

  code     String
  language String

  verdict SubmissionVerdict @default(QU)

  isLocked Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([problemId])
  @@index([contestantId])
  @@index([authorId, problemId])
  @@index([authorId, contestantId])
  @@index([contestantId, problemId])
}

enum SubmissionVerdict {
  RN // Running
  AC // Accepted
  WA // Wrong Answer
  AB // Aborted
  QU // In Queue
  IR // Invalid Return
  CE // Compile Error
  RTE // Runtime Error
  OLE // Output limit exceeded
  TLE // Time limit exceeded
  MLE // Memory limit exceeded
  ISE // Internal Server Error
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  problems Problem[]
}

model Type {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  problems Problem[]
}

// explicit m-n relation: CategoryOnProblem

model Problem {
  id   Int    @id @default(autoincrement())
  slug String @unique

  name        String
  description String?
  points      Float

  input  String @default("stdin")
  output String @default("stdout")

  problemSource String?
  authors       User[]  @relation("AuthorToProblem")
  curators      User[]  @relation("CuratorToProblem")
  testers       User[]  @relation("TesterToProblem")

  pdfUuid String?

  categoryId Int      @default(0)
  category   Category @relation(fields: [categoryId], references: [id])

  types            Type[]
  contests         Contest[]
  submissions      Submission[]
  testEnvironments ProblemTestEnvironment?
  solution         String?

  isDeleted Boolean @default(false)
  isPublic  Boolean @default(true)
  isLocked  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProblemTestEnvironment {
  problemId Int     @id
  problem   Problem @relation(fields: [problemId], references: [id])

  allowedLangs String[] @default([])
  timeLimit    Int      @default(1) // seconds
  memoryLimit  Int      @default(256) // in MB

  PTEs ProblemLanguageTestEnvironment[]
}

// Specific configuration for a coding language
model ProblemLanguageTestEnvironment {
  problemId Int                    @unique
  PTE       ProblemTestEnvironment @relation(fields: [problemId], references: [problemId])
  lang      String                 @unique

  timeLimit   Int @default(1) // seconds
  memoryLimit Int @default(256) // in MB

  @@id([problemId, lang])
}

enum UserStatus {
  ACTIVE
  DISABLED
  BANNED
  CONF_AWAITING
}

enum JudgeStatus {
  ACTIVE
  DISABLED
}

// Judge
model Judge {
  id   String  @id @default(uuid())
  name String  @unique
  host String  @unique
  ip   String?

  status JudgeStatus @default(ACTIVE)
  token  JudgeToken?

  isDeleted Boolean @default(false)

  lastActive DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model JudgeToken {
  id      String @id @default(cuid()) // ensure that when judge tokens are (re)generated, they are jwt-ed from different ids
  judge   Judge  @relation(fields: [judgeId], references: [id])
  judgeId String @unique

  createdAt DateTime @default(now())
}
